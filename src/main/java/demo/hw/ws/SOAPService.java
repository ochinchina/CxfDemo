package demo.hw.ws;

import java.net.MalformedURLException;
import java.net.URL;
import jakarta.annotation.Generated;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.4
 * 2024-07-11T15:23:35.091+08:00
 * Generated source version: 4.0.4
 *
 */
@WebServiceClient(name = "SOAPService",
                  wsdlLocation = "file:///C:/Users/stou/CxfDemo/src/main/java/demo/hw/wsdl/hello_world_async.wsdl",
                  targetNamespace = "http://apache.org/hello_world_async_soap_http")
@Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00", comments = "Apache CXF 4.0.4")
public class SOAPService extends Service {

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public static final URL WSDL_LOCATION;

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public static final QName SERVICE = new QName("http://apache.org/hello_world_async_soap_http", "SOAPService");
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public static final QName SoapPort = new QName("http://apache.org/hello_world_async_soap_http", "SoapPort");
    static {
        URL url = null;
        try {
            url = new URL("file:///C:/Users/stou/CxfDemo/src/main/java/demo/hw/wsdl/hello_world_async.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SOAPService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:///C:/Users/stou/CxfDemo/src/main/java/demo/hw/wsdl/hello_world_async.wsdl");
        }
        WSDL_LOCATION = url;
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public SOAPService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public SOAPService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public SOAPService() {
        super(WSDL_LOCATION, SERVICE);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public SOAPService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public SOAPService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public SOAPService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns GreeterAsync
     */
    @WebEndpoint(name = "SoapPort")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public GreeterAsync getSoapPort() {
        return super.getPort(SoapPort, GreeterAsync.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GreeterAsync
     */
    @WebEndpoint(name = "SoapPort")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2024-07-11T15:23:35.091+08:00")
    public GreeterAsync getSoapPort(WebServiceFeature... features) {
        return super.getPort(SoapPort, GreeterAsync.class, features);
    }

}
